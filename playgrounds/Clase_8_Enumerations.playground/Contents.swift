import Foundation

// Clase 8

// Enumerations

/*
 Index:
 -Enumeration definition
 -Matching Enumeration Values with Switch Statement
 -Iterating over Enumeration Cases
 -Asociated Values
 -Raw Values
 -Recursive Enumerations
 */

// Keywords: enum, case

/* ‚û°Ô∏è Una "Enumeraci√≥n" define un tipo com√∫n para un grupo de valores relacionados y te permite trabajar con esos valores de forma segura.
 
  ‚û°Ô∏è Las enumeraciones en Swift son tipos de "primera clase", esto significa que pueden adoptar muchas caracter√≠sticas tradicionalmente soportadas s√≥lo por "Clases", como propiedades computadas, m√©todos de instancia, definir inicializadores y conformarse a protocolos.
*/

/* ****************************************** */
// Enumeraciones (sint√°xis)
/* ****************************************** */

/*
 enum SomeEnumeration {
     // enumeration definition goes here
 }
 */


// Ejemplo
// Define un enumeraci√≥n
enum CompassPoint {
    case north
    case south
    case east
    case west
    
    // si quiero agregar un nuevo caso (o valor) a la enum
    // uso la palabra reservada "case"
    
//    case northEast
}

// NOTA: Los valores introducidos en la enumeraci√≥n son sus "casos".

// Ejemplo de casos m√∫ltiples en una sola l√≠nea ‚ö†Ô∏è
// ‚úçÔ∏è

var directionToHead = CompassPoint.west
print("La direcci√≥n actual \(directionToHead)")
// "La direcci√≥n actual es west"


/* ****************************************** */
// Usando un "Switch" sobre una enumeraci√≥n
/* ****************************************** */

// Ejemplo

// Define una enumeraci√≥n que agrupa una serie
// de valores asociados, en este caso enumera los
// "momentos del d√≠a"
enum MomentoDelDia {
    case ma√±ana
    case mediodia
    case tarde
    case noche
}

// Define una constante que "apunta" (y almacena) el valor de un caso en particular, en este ejemplo "noche"
let momentoActual = MomentoDelDia.mediodia

// Le pasamos un "Switch" a la enumeraci√≥n
// de esta forma podemos ejecutar un c√≥digo diferente
// de acuerdo al caso actual
switch momentoActual {
    case .ma√±ana:
    print("Es de ma√±ana")
    case .mediodia:
    print("Es de mediod√≠a")
    case .tarde:
    print("Es de tarde")
    case .noche:
    print("Es de noche")
}

/* ****************************************************** */
// Iterando sobre los casos (valores) de una enumeraci√≥n
/* ****************************************************** */

// Para algunas enumeraciones es √∫til tener una colecci√≥n con todos los casos de la enumeraci√≥n.

// Para poder hacer que los casos de una enumeraci√≥n se conviertan en elementos de una colecci√≥n puedes escribir "CaseIterable" despu√©s del nombre de la enumeraci√≥n.

// Swift expone una colecci√≥n con TODOS los casos en la propiedad "allCases" de la enumeraci√≥n.

// Un ejemplo:

// 1.Declara una enumeraci√≥n que agrupa una serie de bebidas
enum Bebida: CaseIterable {
    case cafe, t√©, jugo
}

// 2.Cuenta todos los casos que contiene la enumeraci√≥n
// y almacena ese dato en la constante "numeroDePosibilidadesParaBeber"
let numeroDePosibilidadesParaBeber = Bebida.allCases.count

// ‚û°Ô∏è mediante la propiedad "allCases" accedemos a una colecci√≥n que contiene todos los casos de la enumeraci√≥n

// 3.Imprime la cantidad e bebidas disponibles que hay
print("\(numeroDePosibilidadesParaBeber) bebidas disponibles")

// 4.Ahora iteramos sobre todos los elementos de la colecci√≥n, para eso usamos de nuevo la propiedad de la enumeraci√≥n
    "allCases"

// For in Loops sobre una Enum (que est√° tratada como una colecci√≥n)
for bebida in Bebida.allCases {
    print(bebida)
}

// ü§ì CaseIterable (Protocol)
// ü§ì allCases (Property)


/* ************************** */
// Valores brutos (Raw Values)
/* ************************** */

// Las enumeraciones pueden ser pre-populadas con valores
// por defecto (llamados "raw values") los cuales tienen
// que ser todos del MISMO TIPO.

enum Tama√±oHoja: String {
    case A4 // por defecto el nombre pasa a ser la asignaci√≥n del string, el "raw value"
    case A3
    case A5
    case A6
}

// Ahora "tama√±oHojaPreferida" es de tipo String
let tama√±oHojaPreferida = Tama√±oHoja.A3.rawValue
print(tama√±oHojaPreferida)

// ‚§¥Ô∏è Aplicarle un m√©todo incorporado de String como "lowercased"

print("Mi tama√±o de hoja preferida es \(tama√±oHojaPreferida) ")

// Ejemplo asign√°ndole de entrada un valor de tipo 'Int'
// a cada caso y conformando la enumeraci√≥n al protocolo
// "CaseIterable" para que luego se pueda iterar
enum NumeroPar: Int, CaseIterable {
    case dos = 2 // 2 es el raw value del caso "dos"
    case cuatro = 4 // etc
    case seis = 6
    case ocho = 8
}

let dos = NumeroPar.dos.rawValue
let cuatro = NumeroPar.cuatro.rawValue
let suma = dos + cuatro

// Itera sobre todos los casos de la enumeraci√≥n
// imprimiendo los valores brutos de cada caso
for item in NumeroPar.allCases {
    print(item.rawValue)
}


/* ************************** */
// üïµÔ∏è‚Äç‚ôÇÔ∏è
// Investigar los t√≥picos:
// - Valores asociados
// - Enumeraciones recursivas
/* ************************** */


