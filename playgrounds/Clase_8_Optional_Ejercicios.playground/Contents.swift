import Foundation

/*  Pr√°ctica sobre "Optionals" üèãÔ∏è‚Äç‚ôÄÔ∏è  */

// Ejercicios

/* ****************************************************** */
// 01. Declarar un tipos opcionales
/* ****************************************************** */

// Declarar un tipo String opcional y asignarle un string literal
// ‚úçÔ∏è
// Ahora vaciar este opcional (que no contenga ning√∫n valor)
// ‚úçÔ∏è
// Volver a asignarle un valor (distinto al anterior)
// ‚úçÔ∏è

// Declarar un tipo Int opcional y asignarle un string literal
// ‚úçÔ∏è
// Ahora vaciar este opcional (que no contenga ning√∫n valor)
// ‚úçÔ∏è
// Volver a asignarle un valor (distinto al anterior)
// ‚úçÔ∏è

// Declarar un tipo Bool opcional y asignarle un string literal
// ‚úçÔ∏è
// Ahora vaciar este opcional (que no contenga ning√∫n valor)
// ‚úçÔ∏è
// Volver a asignarle un valor (distinto al anterior)
// ‚úçÔ∏è

/* ****************************************************** */
// 02. Desenvolvimiento forzado a trav√©s de !
/* ****************************************************** */

// Volver a poner a "nil" el string opcional declarado anteriormente
// ‚úçÔ∏è
// Desenvolverlo forzadamente con el signo ! (se producir√° una excepci√≥n) ya que la constante no est√° conteniendo ning√∫n valor
// ‚úçÔ∏è
// Arreglar este error asign√°ndole nuevamente un string literal a la constante
// ‚úçÔ∏è

/* ****************************************************** */
// 03. Determinar si un opcional contiene un valor o no
// a trav√©s del condicional "if"
/* ****************************************************** */

// Declarar un Int opcional y asignarle un entero
// ‚úçÔ∏è
// Inspeccionar el opcional declarado mediante un condicional if
// y en caso de que contenga un valor, imprimir un mensaje acorde
// ‚úçÔ∏è

/* ****************************************************************** */
// 04. Inspeccionando un opcional a trav√©s de un "optional binding"
/* ****************************************************************** */

// Usamos "Optional binding" para saber si un opcional contiene un valor o no, y si lo contiene, hacer que ese valor este disponible temporalmente en una constante o variable que podr√° ser usada en la primer rama del if (es decir, en la rama que se ejecuta si la condici√≥n es cierta)

// Declarar un Float opcional y asignarle un flotante
// ‚úçÔ∏è
// Mediante el mecanismo "optional binding" averiguar si el opcional declarado
// contiene actualmente un valor o no
// En caso de que lo contenga, almacenar ese valor en una constante temporal
// y luego, en la primer rama del if imprimir en consola ese valor
// ‚úçÔ∏è
// Cambiar el estado del float opcional vaci√°ndolo
// Observar como se ejecuta la segunda rama del if (la rama "false")
// ‚úçÔ∏è


